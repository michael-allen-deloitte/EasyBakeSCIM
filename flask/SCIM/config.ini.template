[General]
# must be one of [database]
# this will be extended for different backend types
backend_type = database
# must be one of [NOTSET, DEBUG, INFO, WARNING, ERROR, CRITICAL] (https://docs.python.org/3/library/logging.html#logging-levels)
# defaults to INFO if nothing is supplied or if value is entered incorrectly
log_level = 

[Okta]
# this value is taken from the URL of the app this is connected to in okta
# use onprem_app for local db and test cases
schema = 
# this is the value you set for the "Unique user field name" setting
# in the app wizard when configuring Provisioning
# this needs to be mapped in the implementation filter to the proper
# key in the backend
username_field = 

[Database]
# local determines if the connector will attempt to connect to the database with info from below, 
# or if it will just populate and use a local sqllite db (mostly for testing)
local =
# if local = true then the rest of the values in this section are ignored 
host = 
username = 
password = 
database = 
# ex: mysql+pymysql
# see https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls
dialect_driver_string = 

[Auth]
authType = 
# if using basic auth the headerName will be the desired username and the headerValue will be the desired password
headerName = 
headerValue = 

[SCIM Features]
# these values will be true/false and will be used to determine what endpoints will be enabled
# for your connector. All endpoints that Okta supports exist in the base connector (unimplemented),
# but we only want to expose the ones that are in use, and return a 404 or 501 for all that are not.
# see the list of features here: https://help.okta.com/en-us/Content/Topics/Provisioning/opp/OPP-create-SCIM-connectors.htm
# see below for method to endpoint mappings
# oktaFunction = Backend implementation function = HTTP endpoint
# getUsers = UserBackend.list_users() = GET /Users
# getUser = UserBackend.get_user() = GET /Users/<user_id>
# createUser = UserBackend.create_user() = POST /Users
# updateUser = UserBackend.update_user() = PUT /Users/<user_id>
# getGroups = Not implemented in EasyBakeSCIM yet = GET /Groups
# getGroup = Not implemented in EasyBakeSCIM yet = GET /Groups/<group_id>
# createGroup = Not implemented in EasyBakeSCIM yet = POST /Groups
# updateGroup = Not implemented in EasyBakeSCIM yet = PUT /Groups/<group_id>
# deleteGroup = Not implemented in EasyBakeSCIM yet = DELETE /Groups/<group_id>
# above each feature will be a comment letting you know what methods they use
# createUser, getUsers
PUSH_NEW_USERS = 
# updateUser
PUSH_PASSWORD_UPDATES = 
# createUser, updateUser, getUsers
PUSH_PENDING_USERS = 
# updateUser
PUSH_PROFILE_UPDATES = 
# updateUser
PUSH_USER_DEACTIVATION = 
# updateUser
REACTIVATE_USERS = 
# getUsers
IMPORT_NEW_USERS = 
# getUsers
OPP_SCIM_INCREMENTAL_IMPORTS = 
# IMPORT_GROUPS_WITH_USERS is not an feature according to Okta, but will be used to determine
# if the /Groups endpoint needs to be enabled for the above IMPORT features
# getGroups
IMPORT_GROUPS_WITH_USERS = 
# getUser
IMPORT_PROFILE_UPDATES = 
# getGroup, createGroup, updateGroup, deleteGroup
GROUP_PUSH = 

[Cache]
# If this value is set to 0 the cache will be cleaned up along with the lock file
lifetime_min = 45
# This determines how long a lock file will be honored since its last modification.
# If something happens during pagination and the loop gets broken, the lock file will
# persist, this value sets the time after which it is assumed an issue occured and 
# the lock file is okay to clean up. This value should be larger than the average
# run time of a full import, but shorter than the frequency of said imports. 
lock_lifetime_min = 45
dir = SCIM/.cache